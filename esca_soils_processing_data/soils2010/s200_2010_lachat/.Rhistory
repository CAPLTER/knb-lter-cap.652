use_i
the_choosen_ones <- taxon_choices[use_i, ]
the_choosen_ones
the_choosen_ones$taxon_rank <- character(nrow(the_choosen_ones))
View(the_choosen_ones)
use_i <- is.na(the_choosen_ones$authority_taxon_id)
the_choosen_ones$authority_taxon_id[use_i] <- ""
choices2map("~/Desktop/taxonomy/")
character(nrow(the_choosen_ones))
nrow(the_choosen_ones)
if (sum(is.na(use_i)) == dim(taxon_choices)[1]){
stop("No selections were made in the taxon_choices.txt file. Please select which raw taxa and authority resolved taxa pairings you'd like to use.")
}
the_choosen_ones$taxon_rank <- character(nrow(the_choosen_ones))
use_i <- is.na(the_choosen_ones$authority_taxon_id)
the_choosen_ones$authority_taxon_id[use_i] <- ""
for (i in 1:length(the_choosen_ones$authority_match)){
info <- the_choosen_ones$authority_taxon_id[i]
if (!info == ""){
info <- itis_taxrank(query = as.numeric(info))
the_choosen_ones$taxon_rank[i] <- info
}
}
View(the_choosen_ones)
path <- ('~/Desktop/taxonomy/')
read.table(paste(path, "/", "taxon_choices.txt", sep = ""),
header = T,
sep = "\t",
as.is = T,
na.strings = "NA")
beta <- read.table(paste(path, "/", "taxon_choices.txt", sep = ""),
header = T,
sep = "\t",
as.is = T,
na.strings = "NA")
identical(taxon_choices, beta)
View(taxon_choices)
View(beta)
View(beta)
q()
q()
install.packages(c("rlang", "wikitaxa", "withr"))
install.packages(c("rlang", "wikitaxa", "withr"), lib="/usr/local/lib/R/site-library")
# libraries ----
library(googlesheets)
library(tidyverse)
library(RPostgreSQL)
library(RODBCext)
# database connections ----
source('~/Documents/localSettings/pg_prod.R')
pg <- pg_local
pg <- pg_prod
# fetch data from Google Doc ----
gs_ls()
taxaToken <- gs_title('Species missing from taxonomic tree (Survey 200)')
taxa <- gs_read(taxaToken, ws=2) # options: ws, range
View(taxa)
taxa <- taxa %>% slice(20:21)
View(taxa)
arthFamily <- taxa %>%
# select(-`Add Plant`, -`Taxa to Remove`) %>%
filter(is.na(added)) %>%
filter(!is.na(class)) %>%
filter(is.na(genus_subgenus)) %>%
filter(!is.na(family))
# write new data data to pg
schema <- 'survey200'
newtable <- 'temp_taxa'
newdata <- arthFamily
View(arthFamily)
if (dbExistsTable(pg, c(schema, newtable))) dbRemoveTable(pg, c(schema, newtable)) # make sure tbl does not exist
dbWriteTable(pg, c(schema, newtable), value = newdata, row.names = F) # write temp table
dbExecute(pg,'
INSERT INTO survey200.insect_taxon_list (
arth_class,
arth_order,
arth_family,
insect_scientific_name
)
(
SELECT
class,
"order",
family,
scientific_name
FROM
survey200.temp_taxa
);')
arthOrder <- taxa %>%
# select(-`Add Plant`, -`Taxa to Remove`) %>%
filter(is.na(added)) %>%
filter(!is.na(class)) %>%
filter(is.na(family)) # %>%
# mutate(`new arth tax` = replace(`new arth tax`, order == 'Zygentoma', 'Zygentoma'))
# write new data data to pg
schema <- 'survey200'
newtable <- 'temp_taxa'
newdata <- arthOrder
View(arthOrder)
if (dbExistsTable(pg, c(schema, newtable))) dbRemoveTable(pg, c(schema, newtable)) # make sure tbl does not exist
dbWriteTable(pg, c(schema, newtable), value = newdata, row.names = F) # write temp table
# insert into insect_taxon_list
dbExecute(pg,'
INSERT INTO survey200.insect_taxon_list (
arth_class,
arth_order,
insect_scientific_name
)
(
SELECT
class,
"order",
scientific_name
FROM
survey200.temp_taxa
);')
# clean up
dbRemoveTable(pg, c(schema, newtable))
library(readxl)
library(stringr)
library(tidyverse)
library(RPostgreSQL)
library(zoo)
source('~/Documents/localSettings/pg_local.R')
pg <- pg_local
soilSamples <- dbGetQuery(pg, "
SELECT
ss.soil_sample_id,
ss.survey_id,
se.samp_date,
sites.site_code,
ss.location_description,
ss.sampling_notes,
ss.location_description_center
FROM survey200.soil_samples ss
JOIN survey200.sampling_events se ON (se.survey_id = ss.survey_id)
JOIN survey200.sites ON (sites.site_id = se.site_id)
WHERE
EXTRACT (YEAR FROM se.samp_date) = 2015 AND
sites.research_focus LIKE 'survey200';") %>%
mutate(site_code = str_sub(site_code, 1, str_length(site_code) - 1)) # strip off the trailing 1
soilSamples <- dbGetQuery(pg, "
SELECT
ss.soil_sample_id,
ss.survey_id,
se.samp_date,
sites.site_code,
ss.location_description,
ss.sampling_notes
FROM survey200.soil_samples ss
JOIN survey200.sampling_events se ON (se.survey_id = ss.survey_id)
JOIN survey200.sites ON (sites.site_id = se.site_id)
WHERE
EXTRACT (YEAR FROM se.samp_date) = 2015 AND
sites.research_focus LIKE 'survey200';") %>%
mutate(site_code = str_sub(site_code, 1, str_length(site_code) - 1)) # strip off the trailing 1
dbGetQuery(pg, "
SELECT
ss.soil_sample_id,
ss.survey_id,
se.samp_date,
sites.site_code,
ss.location_description,
ss.sampling_notes
FROM survey200.soil_samples ss
JOIN survey200.sampling_events se ON (se.survey_id = ss.survey_id)
JOIN survey200.sites ON (sites.site_id = se.site_id)
WHERE
EXTRACT (YEAR FROM se.samp_date) = 2015 AND
sites.research_focus LIKE 'survey200';")
q()
install.packages("knitr")
library(readxl)
library(stringr)
library(tidyverse)
library(RPostgreSQL)
library(zoo)
library(tools)
# postgres ----
source('~/Documents/localSettings/pg_prod.R')
pg <- pg_prod
dbExecute(pg, '
ALTER TABLE survey200.soil_samples
DROP COLUMN center_utm,
DROP COLUMN north_utm,
DROP COLUMN south_utm,
DROP COLUMN west_utm,
DROP COLUMN east_utm
;')
dbExecute(pg, '
ALTER TABLE survey200.soil_samples
ADD COLUMN location_description_north character varying (127),
ADD COLUMN location_description_south character varying (127),
ADD COLUMN location_description_west character varying (127),
ADD COLUMN location_description_east character varying (127),
ADD COLUMN location_description_center character varying (127),
ADD COLUMN north_utm_lat double precision,
ADD COLUMN north_utm_long double precision,
ADD COLUMN north_utm_altitude real,
ADD COLUMN north_utm_accuracy real,
ADD COLUMN south_utm_lat double precision,
ADD COLUMN south_utm_long double precision,
ADD COLUMN south_utm_altitude real,
ADD COLUMN south_utm_accuracy real,
ADD COLUMN west_utm_lat double precision,
ADD COLUMN west_utm_long double precision,
ADD COLUMN west_utm_altitude real,
ADD COLUMN west_utm_accuracy real,
ADD COLUMN east_utm_lat double precision,
ADD COLUMN east_utm_long double precision,
ADD COLUMN east_utm_altitude real,
ADD COLUMN east_utm_accuracy real,
ADD COLUMN center_utm_lat double precision,
ADD COLUMN center_utm_long double precision,
ADD COLUMN center_utm_altitude real,
ADD COLUMN center_utm_accuracy real;')
dbExecute(pg, "
INSERT INTO survey200.soil_samples
(
survey_id,
location_description_north,
location_description_south,
location_description_west,
location_description_east,
location_description_center,
north_utm_lat,
north_utm_long,
north_utm_altitude,
north_utm_accuracy,
south_utm_lat,
south_utm_long,
south_utm_altitude,
south_utm_accuracy,
west_utm_lat,
west_utm_long,
west_utm_altitude,
west_utm_accuracy,
east_utm_lat,
east_utm_long,
east_utm_altitude,
east_utm_accuracy,
center_utm_lat,
center_utm_long,
center_utm_altitude,
center_utm_accuracy
)
(
SELECT
survey_id,
soil_samples_location_description_north,
soil_samples_location_description_south,
soil_samples_location_description_west,
soil_samples_location_description_east,
soil_samples_location_description_center,
soil_samples_north_utm_latitude,
soil_samples_north_utm_longitude,
soil_samples_north_utm_altitude,
soil_samples_north_utm_accuracy,
soil_samples_south_utm_latitude,
soil_samples_south_utm_longitude,
soil_samples_south_utm_altitude,
soil_samples_south_utm_accuracy,
soil_samples_west_utm_latitude,
soil_samples_west_utm_longitude,
soil_samples_west_utm_altitude,
soil_samples_west_utm_accuracy,
soil_samples_east_utm_latitude,
soil_samples_east_utm_longitude,
soil_samples_east_utm_altitude,
soil_samples_east_utm_accuracy,
soil_samples_center_utm_latitude,
soil_samples_center_utm_longitude,
soil_samples_center_utm_altitude,
soil_samples_center_utm_accuracy
FROM s200_tablet.gpi
WHERE s_research_focus = 'survey200');")
dbExecute(pg, '
CREATE TABLE survey200.soil_lachat
(
id serial,
soil_sample_id integer,
deep_core_type text,
sample_id text,
sample_type text,
replicate_number integer,
repeat_number integer,
cup_number text,
manual_dilution_factor integer,
auto_dilution_factor integer,
weight_units text,
weight text,
units text,
detection_date date,
detection_time text,
user_name text,
run_file_name text,
description text,
channel_number integer,
analyte_name text,
peak_concentration double precision,
determined_conc double precision,
concentration_units text,
peak_area double precision,
peak_height double precision,
calibration_equation text,
retention_time double precision,
inject_to_peak_start double precision,
conc_x_adf double precision,
conc_x_mdf double precision,
conc_x_adf_x_mdf double precision
)
WITH (
OIDS=FALSE
);')
dbExecute(pg,'DROP VIEW survey200.public_lens_survey200_soil_physical_properties;')
dbExecute(pg,'
ALTER TABLE survey200.soil_center_cores
ALTER COLUMN conductivity TYPE DOUBLE PRECISION;')
dbExecute(pg,'DROP VIEW survey200.public_lens_survey200_soil_chemical_properties;')
dbExecute(pg,'
ALTER TABLE survey200.soil_perimeter_cores
ALTER COLUMN po4_p TYPE DOUBLE PRECISION;')
dbGetInfo()
dbGetInfo(pg)
library(readxl)
library(stringr)
library(tidyverse)
library(RPostgreSQL)
library(zoo)
library(tools)
soilSamples <- dbGetQuery(pg, "
SELECT
ss.soil_sample_id,
ss.survey_id,
se.samp_date,
sites.site_code,
ss.location_description,
ss.sampling_notes,
ss.location_description_center
FROM survey200.soil_samples ss
JOIN survey200.sampling_events se ON (se.survey_id = ss.survey_id)
JOIN survey200.sites ON (sites.site_id = se.site_id)
WHERE
EXTRACT (YEAR FROM se.samp_date) = 2010;") %>%
mutate(site_code = str_sub(site_code, 1, str_length(site_code) - 1)) # strip off the trailing 1
View(soilSamples)
soilSamples <- dbGetQuery(pg, "
SELECT
ss.soil_sample_id,
ss.survey_id,
se.samp_date,
sites.site_code,
ss.location_description,
ss.sampling_notes,
ss.location_description_center
FROM
survey200.soil_samples ss
JOIN survey200.sampling_events se ON (se.survey_id = ss.survey_id)
JOIN survey200.sites ON (sites.site_id = se.site_id)
WHERE
EXTRACT (YEAR FROM se.samp_date) = 2010;") %>%
mutate(site_code = str_sub(site_code, 1, str_length(site_code) - 1)) # strip off the trailing 1
tidy_raw_lachat <- function(datafile) {
if(grepl("x", file_ext(datafile))) {
lachatData <- read_excel(datafile)
} else {
lachatData <- read_csv(datafile)
}
lachatData <- lachatData %>%
mutate(
`Detection Date` = as.Date(`Detection Date`, format = '%m/%d/%Y'),
code_layer = str_extract(`Sample ID`, '^(\\S{2,4})\\s(TOP|BOT)')
) %>%
separate(code_layer, into = c("site_code", "deep_core_type"), sep = " ") %>%
rename_all(tolower) %>%
rename(weight_units = `weight (units)`)
colnames(lachatData) <- gsub(" ", "\\_", colnames(lachatData)) # sp to underscore
return(lachatData)
}
perimeter_2010_n <-
dbGetQuery(pg, "
SELECT
sites.site_code,
prc.soil_sample_id,
prc.deep_core_type --,
-- prc.n_extract_volume,
--prc.soil_n_fw
FROM
survey200.soil_perimeter_cores prc
JOIN survey200.soil_samples ss ON (ss.soil_sample_id = prc.soil_sample_id)
JOIN survey200.sampling_events se ON (se.survey_id = ss.survey_id)
JOIN survey200.sites ON (sites.site_id = se.site_id)
WHERE
EXTRACT (YEAR FROM se.samp_date) = 2010;") %>%
mutate(site_code = str_sub(site_code, 1, str_length(site_code) - 1)) # strip off the trailing 1
View(perimeter_2010_n)
setwd("~/Dropbox/development/survey200/esca_soils/soils2010/s200_2010_lachat")
raw_lachat_nitrogen <- bind_rows(
tidy_raw_lachat('Survey_200_NO3_NH4_3_27_2012-1.xls'),
tidy_raw_lachat('Survey_200_NO3_NH4_3_28_2012_1.xls'),
tidy_raw_lachat('Survey_200_NO3_NH4_3_28_2012_2.xls'),
tidy_raw_lachat('Survey_200_NO3_NH4_3_29_2012.xls')
) %>%
mutate(
deep_core_type = case_when(
grepl("top", deep_core_type, ignore.case = T) ~ 'top',
grepl("bot", deep_core_type, ignore.case = T) ~ 'bottom'
),
detection_time = as.character(detection_time, format = '%H:%M:%S')
) %>%
left_join(perimeter_2010_n,
by = c("site_code", "deep_core_type")) %>%
select(soil_sample_id, deep_core_type, sample_id:inject_to_peak_start)
View(raw_lachat_nitrogen)
dataname <- raw_lachat_nitrogen
if (dbExistsTable(pg, c('survey200', 'temp_lachat'))) dbRemoveTable(pg, c('survey200', 'temp_lachat')) # make sure tbl does not exist
dbWriteTable(pg, c('survey200', 'temp_lachat'), value = dataname, row.names = F)
insert_lachat_2010_query <- '
INSERT INTO survey200.soil_lachat (
soil_sample_id,
deep_core_type,
sample_id,
sample_type,
replicate_number,
repeat_number,
cup_number,
manual_dilution_factor,
auto_dilution_factor,
weight_units,
weight,
-- units,
detection_date,
detection_time,
user_name,
run_file_name,
description,
channel_number,
analyte_name,
peak_concentration,
-- determined_conc,
concentration_units,
peak_area,
peak_height,
calibration_equation,
retention_time,
inject_to_peak_start --,
-- conc_x_adf,
-- conc_x_mdf,
-- conc_x_adf_x_mdf
)
(
SELECT
soil_sample_id,
deep_core_type,
sample_id,
sample_type,
replicate_number,
repeat_number,
cup_number,
manual_dilution_factor,
auto_dilution_factor,
weight_units,
weight,
-- units,
detection_date,
detection_time,
user_name,
run_file_name,
description,
channel_number,
analyte_name,
peak_concentration,
-- determined_conc,
concentration_units,
peak_area,
peak_height,
calibration_equation,
retention_time,
inject_to_peak_start --,
-- conc_x_adf,
-- conc_x_mdf,
-- conc_x_adf_x_mdf
FROM survey200.temp_lachat
);'
# insert data
dbExecute(pg, insert_lachat_2010_query)
# clean up
if (dbExistsTable(pg, c('survey200', 'temp_lachat'))) dbRemoveTable(pg, c('survey200', 'temp_lachat')) # clean up
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ALTER COLUMN survey_year TYPE text;')
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ADD COLUMN survey_year TYPE text;')
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ADD COLUMN survey_year TYPE text;')
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ADD COLUMN survey_year text;')
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ALTER COLUMN survey_year TYPE integer;')
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ALTER COLUMN survey_year TYPE integer
USING SING survey_year::integer;')
dbExecute(pg,'
ALTER TABLE survey200.soil_lachat
ALTER COLUMN survey_year TYPE integer USING survey_year::integer;')
dbExecute(pg, 'UPDATE survey200.soil_lachat SET survey_year = 2015')
dbExecute(pg, 'UPDATE survey200.soil_lachat SET survey_year = 2010')
